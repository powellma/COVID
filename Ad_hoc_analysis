library(tidyr)
library(dplyr)
library(ggplot2)
library(readr)
library(usmap)

#######################################################################################################################################
## Gathring Global Data
#######################################################################################################################################

COVID_Global<- tbl_df(read_csv("https://covid.ourworldindata.org/data/owid-covid-data.csv"))
str(COVID_Global)

unique(COVID_Global$location)

brazil_covid<-COVID_Global %>% filter(location == "Brazil")

brazil_covid


#######################################################################################################################################
## Gathring US Data/Reload Data function
#######################################################################################################################################

##Load Population data set, Only have to do this once

{county_pop_URL<- "https://www2.census.gov/programs-surveys/popest/datasets/2010-2019/counties/totals/co-est2019-alldata.csv"
US_county_pop<-tbl_df(read.csv(county_pop_URL))[,c(1, 6:7, 19)] %>% filter(SUMLEV == 50)

US_county_pop$CTYNAME<-sub(" County", "", US_county_pop$CTYNAME)
US_county_pop$CTYNAME<-sub(" Parish", "", US_county_pop$CTYNAME)
US_county_pop<-US_county_pop[,-1] %>% select(STNAME, CTYNAME, POPESTIMATE2019)

names(US_county_pop)<-c("state", "county", "pop")

US_county_pop %>% filter(state == "Louisiana")

US_state_pop<-US_county_pop %>% group_by(state)%>% summarize(pop = sum(pop))
names(US_state_pop)<-c("State", "Pop")
US_state_pop$State<-as.character(US_state_pop$State)

State<-c('Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 
         'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 
         'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 
         'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 
         'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota', 'Ohio', 
         'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota', 
         'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 
         'Wisconsin', 'Wyoming', 'American Samoa', 'Guam', 'Northern Mariana Islands', 
         'Puerto Rico', 'Virgin Islands',"District of Columbia")

abr    <-c('AL', 'AK', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'FL', 'GA', 'HI', 'ID', 'IL', 'IN', 'IA', 
           'KS', 'KY', 'LA', 'ME', 'MD', 'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ', 
           'NM', 'NY', 'NC', 'ND', 'OH', 'OK', 'OR', 'PA', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 
           'VA', 'WA', 'WV', 'WI', 'WY', 'AS', 'GU', 'MP', 'PR', 'VI', 'DC')

fips   <-c(01, 02, 04, 05, 06, 08, 09, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
           27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 
           50, 51, 53, 54, 55, 56, 60, 66, 69, 72, 78,99)


state_abr<-tbl_df(cbind(State,abr,fips))
remove(abr,fips,State)
}

#--------------------------------------------------------------------------------------------------------------------#

reset_COVID_data<-function(){
  
  ##Load county Data
  raw_data<<-tbl_df(read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv"))
  ##Merge in Population
  county_data   <-tbl_df(merge(raw_data, US_county_pop, by = c("state", "county"), all.x = TRUE)%>% arrange(date,county,state)) 
  ##Column Selection
  county_data   <-county_data[,c(3,2,1,4:7)]
  names(county_data)<-c("Date", "County", "State", "fips","Cases", "Deaths", "Pop")
  
  ##FIPS Corrections
  county_data[county_data$County == "New York City",4]<-36061 ##NYC
  county_data[county_data$County == "New York City",7]<-8336817
  ## Still need to Fix Kansas City, MO and Joplin, MO
  
  County_data  <<-county_data
  
  #-------------------------------------------------------------------------#
  
  ##Group county data by state 
  state_data <- (county_data %>% group_by(Date, State) %>% summarise(cases = sum(Cases), deaths = sum(Deaths)))
  ##Merge in Population
  state_data<-tbl_df(merge(state_data, US_state_pop, by = c("State"), all.x = TRUE))
  ##Add County Column
  state_data$county<-"State Total"
  #Merge in fips Code
  state_data<-merge(state_data, state_abr[,c(1,3)], by = "State")
  ##Arrange in original Order
  state_data<-state_data %>% arrange(Date, State)
  ##Column selection
  state_data<-tbl_df(state_data[,c(2,6,1,7,3,4,5)])
  names(state_data)<-c("Date", "County", "State", "fips","Cases", "Deaths", "Pop")
  State_data<<-state_data
  
  US_data<-state_data %>% group_by(Date) %>% 
    summarise(Cases = sum(Cases), Deaths = sum(Deaths), Pop = sum(as.numeric(Pop)))
  US_data$Pop<-sum(US_county_pop$pop)
  US_data$State  <- "USA Total"
  US_data$County <- "USA Total"
  US_data$fips   <- 0
  
  US_data<-US_data[,c(1,6,5,7,2,3,4)]
  US_data<<-US_data
  
  county_data$Level<-"County"
  state_data$Level<-"State"
  US_data$Level<-"Country"
  
  US_COVID_df<<-rbind(county_data, state_data, US_data) %>% arrange(Date, County, State)
  
  
  print(tail(county_data %>% arrange(Date, Cases)))
  print(tail(state_data  %>% arrange(Date, Cases)))
  print(tail(US_data))
  
  
}


reset_COVID_data()


#######################################################################################################################################
## Check States
#######################################################################################################################################

New_COVID_Trend<-function(state = "New York", county = "New York City", days = 7, metric = "Cases", lvl  = "State", print = TRUE){
  
  data<-US_COVID_df%>% arrange(Date)
  
  if(state == "USA"){
    lvl <- "Country"
  }    
  
  if(lvl == "Country"){   
    data<-data %>% filter(Level == lvl)
    label <- "USA"
  }
  
  if(lvl == "State"){
    data<-data %>% filter(State == state, Level == lvl) 
    label<- state}
  
  if(lvl == "County"){
    data<-data %>% filter(State == state, County == county, Level == lvl)
    label <-paste(county,", ", state_abr$abr[state_abr == state], sep = "")
  }
  
  data$Location<-label
  m <- ifelse(metric == "Cases", 5, 6)
  data<-data.frame(data[, c(9, 1, 7, m, 4)])
  names(data)<-c("Location", "Date", "Pop", "Value", "fips")
  c<-c(data[,4])
  d<-lag(c, days)
  e<-(c-d)
  e[1:days]<-0
  data$New<-e
  data<-data[,c(1,2,4,6,3, 5)]
  plt<-ggplot(data, aes(x = Date))+
    geom_col(aes(y = e))+
    ggtitle(paste(label, metric, "Growth over", days, "days"))+
    ylab(paste("New", metric))+
    theme_light()+
    geom_hline(yintercept = max(data$New), linetype = "dashed")    
  if(print == TRUE){
    print(plt)
    print(tail(data, 10))
  }
  data$Days<-row(data)[,1]
  data<-tbl_df(data)
  k<-nrow(data)
  notes<-cbind(label, metric, data[k,2], days, data[k,3], data[k,4], data[k-14,4], data[k,5], data[k,7], lvl, data[k,6] )
  names(notes)<-c("Location","Metric", "Date", "Delay", metric, "New", "New-14", "Pop", "Days", "Level", "fips")
  output<-list(data, notes)
  
  invisible(output)
  
}

New_COVID_Trend(lvl = "County", days = 1, metric = "Cases")
New_COVID_Trend(lvl = "County", days = 7, metric = "Cases")

New_COVID_Trend(lvl = "County", days = 1, metric = "Deaths")
New_COVID_Trend(lvl = "County", days = 7, metric = "Deaths")


New_COVID_Trend(county = "York", state = "Maine", lvl = "State", days = 1, metric = "Cases")
New_COVID_Trend(county = "York", state = "Maine", lvl = "State", days = 7, metric = "Cases")

New_COVID_Trend(county = "York", state = "Maine", lvl = "County", days = 1, metric = "Cases")
New_COVID_Trend(county = "York", state = "Maine", lvl = "County", days = 7, metric = "Cases")


New_COVID_Trend(lvl = "State", days = 1, metric = "Deaths")
New_COVID_Trend(lvl = "State", days = 7, metric = "Deaths")


New_COVID_Trend(lvl = "Country", days = 1, metric = "Cases")
New_COVID_Trend(lvl = "Country", days = 7, metric = "Cases")

New_COVID_Trend(lvl = "Country", days = 1, metric = "Deaths")
New_COVID_Trend(lvl = "Country", days = 7, metric = "Deaths")

#######################################################################################################################################
## compare states
#######################################################################################################################################

{ 
  state_list<-sort(c(US_COVID_df$State[!duplicated(US_COVID_df$State)])[-2])
  state_list<-state_list[-c(9,12,37,50,42)]
  state_list
  m<-County_data %>% filter(Date == max(County_data$Date))
  m<-m %>% filter(Cases > 5000) %>% arrange(desc(Cases))
  m$cs<-paste(m$County, ",",m$State)
  county_list<-m[!duplicated(m$cs),]
  county_list<-county_list %>% filter(County != "Unknown") %>% select("County", "State")
  nrow(county_list)
  remove(m)
  abr_county_list<-head(county_list, 200)
}


compare_lags<-function(locations, level = "County", delay = 7, unit = "Cases"){
  data_df<-data.frame()  
  log_df<-data.frame()
  start_time<-Sys.time()
  
  if(level == "County"){
    for(j in c(1:nrow(locations))){
      #print(locations[j,])
      a<-New_COVID_Trend(state = as.character(locations[j,2]), county = as.character(locations[j,1]), days = delay, metric = unit, lvl = "County", print = FALSE)
      data_df<-rbind(data_df, a[[1]])
      log_df<-rbind(log_df, a[[2]])
    }
  }
  
  #--------------------------------------------------------------------------------------------------------------------#
  
  if(level == "State"){
    for(j in c(1:length(locations))){
      a <-New_COVID_Trend(state = locations[j], days = delay, lvl = "State", print = FALSE, metric = unit)
      data_df <-rbind(data_df, a[[1]])
      log_df <-rbind(log_df, a[[2]])
    }
  }
  
  log_df$g<-round((log_df$New/log_df$`New-14`),3)
  
  print(head(log_df %>% arrange(desc(g)),10))
  print(paste("Pulled ", nrow(log_df), " locations and ", nrow(data_df), " instances in:", sep = ""))
  print(Sys.time()-start_time)
  
  #inc_states<-as.vector((state_abr[state_abr$State %in% county_list$State]))
  #print(inc_states)
  
  region <- tolower(level)
  
  plt<-plot_usmap(data = log_df, values = "g", regions = region) + scale_fill_viridis_c()
  print(plt)
  output<-list(log_df, data_df, plt)
  invisible(output)
}

Jul7_7

View(abr_county_list)

Jul7_7<-compare_lags(locations = state_list, unit = "Cases", level = "State")
Jul7_3<-compare_lags(locations = state_list, unit = "Cases", level = "State", delay = 3)
Jul7_7<-compare_lags(locations = abr_county_list, delay = 7)

Jul7_7[[1]] %>% arrange(desc(New))

Jul6_7[[1]] %>% arrange(desc(New))
Jul6_7[[1]] %>% arrange(desc(g))

Jul6_3[[1]] %>% arrange(desc(New))
Jul6_3[[1]] %>% arrange(desc(g))

View(Jul3_1[[1]] %>% arrange(desc(g)))

state_COVID_log$g<-round((state_COVID_log$New/state_COVID_log$`New-14`)*100)/100
head(state_COVID_log %>% arrange(desc(g)),10)

county_COVID_log$g<-abs(round(county_COVID_log$New*100/county_COVID_log$`New-14`)/100)
county_COVID_log %>% arrange(desc(g))

plot_usmap(data = county_COVID_log, values = "g", regions = "counties") + scale_fill_viridis_c()

plot_usmap(data = State_data[State_data$Date == max(State_data$Date),], values = "Deaths", 
           regions = "state") + scale_fill_viridis_c()

names(State_data)[4]<-"nt FIPS"

Jul5_7[[1]] %>% arrange(desc(g))

b<-Sys.time()

substr(Jul3_1[[1]]$Location)

test_county<-"Will, IL"

substr(Jul3_1[[1]]$Location, nchar(Jul3_1[[1]]$Location)-2+1, nchar(Jul3_1[[1]]$Location))

substrRight <- function(x, n){
  substr(x, nchar(x)-n+1, nchar(x))
}

substrRight(Jul3_1[[1]]$Location, 2)

Jul3_1[[1]]$Location

Jul3_1[[1]]$State<-Jul3_1[[1]] %>% mutate(state = substrRight(Location, 2)) 
